---
import type { GetStaticPaths } from "astro";
import Link from "../primitives/Link.astro";
const navLinks = [
    { name: "Home", href: "/" },
    { name: "Advertisers", href: "/" },
    { name: "Publishers", href: "/" },
    { name: "Case Studies", href: "/" },
    { name: "Contact Us", href: "/" }
];
---

<header id="main-header" class="header">
    <div class="container">
        <Link id="branding" href="/" class="">
            <img
                src="/assets/VRUME-white-with-red-dot.webp"
                alt="Vrume Logo"
                class="logo"
                width="160"
                height="auto"
            />
        </Link>

        {/* Navegación para escritorio */}
        <nav class="desktop-nav">
            {
                navLinks.map((link) => (
                    <Fragment key={link.name}>
                        <a href={link.href} class="nav-link">
                            {link.name}
                        </a>
                    </Fragment>
                ))
            }
        </nav>

        {/* Botón Hamburguesa para móvil */}
        <button
            id="toggleMenu"
            class="toggle-menu"
            aria-label="Toggle Navigation Menu"
            aria-expanded="false"
            aria-controls="mobileModal"
        >
            <span class="hamburger-line line-1"></span>
            <span class="hamburger-line line-2"></span>
            <span class="hamburger-line line-3"></span>
        </button>
    </div>

    {/* Modal/Overlay para navegación móvil */}
    <div
        id="mobileModal"
        class="mobile-modal"
        role="dialog"
        aria-modal="true"
        aria-hidden="true"
    >
        <nav class="mobile-nav">
            {
                navLinks.map((link) => (
                    <Fragment key={link.name}>
                        <a href={link.href} class="mobile-nav-link">
                            {link.name}
                        </a>
                    </Fragment>
                ))
            }
        </nav>
    </div>
</header>

<script>
    function initializeHeader() {
        // Get DOM elements
        const header = document.getElementById(
            "main-header"
        ) as HTMLElement | null;
        const mobileModal = document.getElementById(
            "mobileModal"
        ) as HTMLElement | null;
        const toggleBtn = document.getElementById(
            "toggleMenu"
        ) as HTMLButtonElement | null;

        // --- Essential Guard! ---
        // If any crucial element is not found, do nothing.
        if (!header || !mobileModal || !toggleBtn) {
            console.error(
                "Header component elements not found. Navigation initialization aborted."
            );
            return; // Stop execution of initializeHeader if any element is missing
        }
        // --- From here, TypeScript knows that header, mobileModal, and toggleBtn are not null ---

        // Get mobile links (now we can use mobileModal directly)
        const mobileLinks = mobileModal.querySelectorAll("a");

        let isMenuOpen = false;

        function toggleMobileMenu() {
            isMenuOpen = !isMenuOpen;

            // Toggle classes - now safe because toggleBtn and mobileModal are not null
            toggleBtn!.classList.toggle("is-active", isMenuOpen);
            mobileModal!.classList.toggle("is-open", isMenuOpen);

            // Manage ARIA attributes
            toggleBtn!.setAttribute("aria-expanded", isMenuOpen.toString());
            mobileModal!.setAttribute("aria-hidden", (!isMenuOpen).toString());

            // Prevent body scroll
            document.body.style.overflow = isMenuOpen ? "hidden" : "";

            // Manage header visibility when toggling the menu
            if (isMenuOpen) {
                header!.classList.remove("header-hidden");
            } else {
                checkScroll();
            }
        }

        function checkScroll() {
            if (isMenuOpen) return;
            // header is not null here
            const shouldHide = window.scrollY > 40;
            header!.classList.toggle("header-hidden", shouldHide);
        }

        // --- Add Event Listeners (now safe) ---

        // Listener for the hamburger button
        toggleBtn.addEventListener("click", toggleMobileMenu);

        // Listener for mobile links
        mobileLinks?.forEach((link) => {
            // Use optional chaining in case there are no links
            link.addEventListener("click", () => {
                if (isMenuOpen) {
                    toggleMobileMenu();
                }
            });
        });

        // Listener for the scroll event
        window.addEventListener("scroll", checkScroll, { passive: true });

        // Initial check
        checkScroll();
    }

    // Execute on DOM content loaded and Astro page navigation
    document.addEventListener("DOMContentLoaded", initializeHeader);
    document.addEventListener("astro:page-load", initializeHeader);
</script>

<style>
    .header {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        z-index: 50;
        padding: 2rem 1rem;
        filter: drop-shadow(0 0 0.5rem var(--color-dark-accent));
        background-color: var(
            --color-bg-secondary
        ); /* Transparent by default on mobile */
        transition:
            background-color var(--transition-duration) ease,
            /* Use global variable */ transform var(--transition-duration) ease,
            backdrop-filter var(--transition-duration) ease;
        transform: translateY(0);
    }

    .header.header-hidden {
        transform: translateY(-100%);
    }

    .container {
        display: flex;
        align-items: center;
        justify-content: space-between;
        max-width: 120rem;
        margin-left: auto;
        margin-right: auto;
        padding-left: 1rem;
        padding-right: 1rem;
    }

    .branding-link {
        /* font-family: var(--font-family-heading); */ /* If you defined a header font */
        font-weight: bold;
        font-size: 1.5rem;
        letter-spacing: -0.025em;
        text-decoration: none;
        transition: opacity var(--transition-duration) ease; /* Use global variable */
        /* Gradient using the accent color */
        /* Adjust the gradient according to your design. Example: accent to white */
        background: linear-gradient(
            to right,
            var(--color-accent),
            var(--color-white)
        );
        -webkit-background-clip: text;
        background-clip: text;
        color: transparent; /* The color comes from the gradient background */
    }
    .branding-link:hover {
        opacity: 0.8;
    }

    .desktop-nav {
        display: none;
        align-items: center;
        gap: 2rem;
    }

    .nav-link {
        font-size: 1.125rem;
        font-weight: 700;
        color: var(--color-text-base);
        font-size: 1.6rem;
        text-decoration: none;
        position: relative;
        transition:
            color var(--transition-duration) ease,
            opacity var(--transition-duration) ease; /* Include opacity in the transition */
    }

    /* Underline effect for desktop links */
    .nav-link::after {
        /* content: ""; */ /* active the underline*/
        position: absolute;
        bottom: -4px;
        left: 0;
        width: 100%;
        height: 2px;
        background-color: var(
            --color-accent
        ); /* Use accent color for underline */
        transform: scaleX(0);
        transform-origin: left;
        transition: transform var(--transition-duration) ease;
    }

    .nav-link:hover,
    .nav-link:focus {
        color: var(--color-accent); /* Change to accent color on hover/focus */
        opacity: 1; /* Full opacity on hover/focus */
    }
    .nav-link:hover::after {
        transform: scaleX(1); /* Display underline */
    }

    .toggle-menu {
        display: flex;
        flex-direction: column;
        gap: 0.4rem;
        background-color: transparent;
        border: none;
        padding: 0.5rem;
        cursor: pointer;
        z-index: 51;
        margin: -0.5rem;
    }
    .toggle-menu:focus-visible {
        outline: 2px solid var(--color-accent); /* Use accent color for focus */
        outline-offset: 2px;
    }

    .hamburger-line {
        display: block;
        width: 3rem;
        height: 3px;
        background-color: var(--color-text-base); /* Base text color (white) */
        border-radius: 9999px;
        transition:
            transform var(--transition-duration) ease-in-out,
            opacity var(--transition-duration) ease-in-out;
    }

    /* Hamburger-to-X animation */
    .toggle-menu.is-active .line-1 {
        transform: translateY(calc(0.7rem + 2px)) rotate(45deg);
        transform-origin: center;
    }
    .toggle-menu.is-active .line-2 {
        opacity: 0;
    }
    .toggle-menu.is-active .line-3 {
        transform: translateY(calc(-0.3rem - 2px)) rotate(-45deg);
        transform-origin: center;
    }

    .mobile-modal {
        position: fixed;
        height: 100dvh;
        inset: 0;
        /* Use global color variable with transparency */
        background-color: rgba(var(--color-black-rgb), 0.9);
        backdrop-filter: blur(10px); /* Adjust the blur value if needed */
        z-index: 49;
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
        opacity: 0;
        pointer-events: none;
        visibility: hidden;
        transition:
            opacity var(--transition-duration) ease,
            visibility var(--transition-duration) ease;
    }
    .mobile-modal.is-open {
        opacity: 1;
        pointer-events: auto;
        visibility: visible;
    }

    .mobile-nav {
        display: flex;
        flex-direction: column;
        align-items: center;
        gap: 1.5rem;
    }

    .mobile-nav-link {
        font-family: var(--font-family-heading);
        font-size: 4rem;
        color: var(--color-text-base); /* Base text (white) */
        text-decoration: none;
        transition: color var(--transition-duration) ease;
    }

    .mobile-nav-link:hover,
    .mobile-nav-link:focus {
        color: var(--color-accent); /* Use accent color for hover/focus */
    }

    /* --- Responsive Styles --- */
    @media (min-width: 1024px) {
        .header {
            padding: 1.5rem 0;
            background-color: var(--color-bg-secondary);
            transform: translateY(0);
        }

        .header.header-hidden {
            transform: translateY(-100%);
        }

        .container {
            /* padding-left: 2rem;
            padding-right: 2rem; */
        }

        .branding-link {
            font-size: 2.25rem;
            color: var(--color-text-base);
        }

        .desktop-nav {
            display: flex;
        }

        .toggle-menu {
            display: none;
        }

        .mobile-modal {
            display: none;
        }
    }
</style>

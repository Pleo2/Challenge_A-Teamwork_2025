---
export interface Props {
    href?: string; // URL for 'a' tags
    tag?: "a" | "button"; // Determines the HTML tag rendered
    block?: boolean; // If true, takes full width (display: block/flex)
    style?: "primary" | "button" | "outline" | "buttonLight"; // Visual style variant
    class?: string; // Allows passing external classes
    localized?: boolean; // Prop exists but isn't used in this logic
    // Allow any other HTML attributes (like aria-label, id, etc.)
    [x: string]: unknown;
}

// Type alias (can be useful for external usage)
export type LinkType = Props & {
    title?: string; // Example of extending Props if needed elsewhere
};

// Destructure props with default values
const {
    href,
    tag, // Let Tag definition below handle default
    block = false, // Default to inline
    size = "md", // Default size
    style = "primary", // Default style
    localized = true, // Default, but unused here
    class: className, // Rename 'class' prop to avoid conflict
    // Note: 'icon' prop was destructured in original but not used in template/style.
    // Note: 'iconSizes' map was defined in original but not used.
    ...rest // Capture remaining attributes (e.g., aria-*, data-*)
} = Astro.props as Props;

// Determine the tag to render, default to 'a' if href is present, otherwise 'button'
const Tag = tag || (href ? "a" : "button");

// Validate: 'a' tags must have an 'href'
if (Tag === "a" && !href) {
    throw new Error("ButtonLink Error: The `href` prop is required when using the `a` tag.");
}

// Prepare href: Ensure internal links start with '/' or default to root '/'
// Allow external links (http/https) or mailto: etc. as is.
let finalHref: string | undefined = undefined;
if (Tag === 'a' && href) {
    if (href.startsWith('/') || href.startsWith('#') || /^[a-z]+:/.test(href)) {
        finalHref = href; // Keep absolute, relative, anchor, or protocol links
    } else {
        finalHref = '/' + href; // Assume relative to root if just a segment
    }
}
---

<Tag
    {...(Tag === 'a' && finalHref ? { href: finalHref } : {})}
    class:list={[
        "button-link", // Base class for all instances
        `button-link--size-${size}`, // Apply size class based on prop
        `button-link--style-${style}`, // Apply style class based on prop
        block ? "button-link--block" : "button-link--inline", // Apply display class
        className // Merge external classes
    ]}
    {...rest}
>
    <slot /> {/* Content goes here (text, icons, etc.) */}
</Tag>

<style>
    /* src/components/ButtonLink.astro <style> */
    /* --- Local :root variables removed, using global variables now --- */

    /* Base styles for all buttons/links */
    .button-link {
        cursor: pointer;
        text-decoration: none;
        border: 1px solid transparent;
        text-align: center;
        /* Use global transition duration */
        transition: background-color var(--transition-duration) ease,
                    color var(--transition-duration) ease,
                    border-color var(--transition-duration) ease,
                    opacity var(--transition-duration) ease;
        position: relative;
        font-weight: 600;
    }
    /* Reset default button styling */
    .button-link[href] { }
    .button-link:not([href]) {
        appearance: none;
        background: none;
        font-family: inherit;
        font-size: inherit;
        border: none;
        padding: 0;
    }
    /* Use accent color for focus outline */
    .button-link:focus-visible {
        outline: 2px solid var(--color-accent);
        outline-offset: 2px;
    }

    /* Display variants */
    .button-link--inline {
        display: inline-flex;
        align-items: center;
        justify-content: center;
    }
    .button-link--block {
        display: flex;
        align-items: center;
        justify-content: center;
        width: 100%;
    }

    /* Size variants - No color changes needed */
    .button-link--size-xs {

        font-size: 0.875rem;
    }
    .button-link--size-sm {
        font-size: 1rem;
    }
    .button-link--size-md {
        font-size: 1.125rem;
    }
    .button-link--size-lg {
        font-size: 1.5rem;
    }

    /* Style variants - Apply global variables */
    .button-link--style-primary {
        /* Keep unstyled or define a default subtle look if needed */
        /* Example: color: var(--color-link); text-decoration: underline; */
    }

    .button-link--style-button {
        /* Use global button primary variables */
        background-color: var(--color-button-primary-bg);
        color: var(--color-button-primary-text);
        border-radius: var(--border-radius); /* Use global border radius */
        font-weight: 600;
    }
    .button-link--style-button:hover {
        /* Use global button hover variable */
        background-color: var(--color-button-primary-hover-bg);
        /* Remove opacity change if background changes */
        /* opacity: 0.85; */
    }
    /* Icon transition (keep as is) */
    .button-link--style-button [data-icon*="arrow-top-right"] {
        transition: transform var(--transition-duration);
    }
    .button-link--style-button:hover [data-icon*="arrow-top-right"] {
        transform: translate(3px, -3px);
    }


    .button-link--style-buttonLight {
        /* Example: White background, accent text */
        background-color: var(--color-bg-card); /* White background */
        color: var(--color-accent); /* Accent color text */
        border: 1px solid var(--color-accent); /* Optional: add accent border */
        border-radius: var(--border-radius); /* Use global border radius */
        font-weight: 700;
    }
     .button-link--style-buttonLight:hover {
        /* Example hover: Darken background slightly, or invert */
         background-color: color-mix(in srgb, var(--color-bg-card) 90%, black);
         /* Alternatively, could invert on hover: */
         /* background-color: var(--color-accent); */
         /* color: var(--color-text-on-accent); */
         /* border-color: var(--color-accent); */
    }
     /* Icon transition (keep as is) */
    .button-link--style-buttonLight [data-icon*="arrow-top-right"] {
        transition: transform var(--transition-duration);
    }
    .button-link--style-buttonLight:hover [data-icon*="arrow-top-right"] {
        transform: translate(3px, -3px);
    }


    .button-link--style-outline {
        /* Use global accent color for border and text */
        border: 1px solid var(--color-border-accent);
        background-color: transparent;
        color: var(--color-accent);
        border-radius: var(--border-radius); /* Use global border radius */
        font-weight: 600;
    }
    .button-link--style-outline:hover {
        /* Fill with accent color on hover */
        background-color: var(--color-accent);
        color: var(--color-text-on-accent); /* Use text color for on-accent background */
        border-color: var(--color-accent); /* Keep border color matching background */
    }
</style>
